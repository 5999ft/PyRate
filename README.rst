PyRate - a Python tool for RAte and Time-series Estimation
==========================================================

.. image:: https://travis-ci.org/GeoscienceAustralia/PyRate.svg?branch=master
   :target: https://travis-ci.org/GeoscienceAustralia/PyRate
.. image:: https://coveralls.io/repos/github/GeoscienceAustralia/PyRate/badge.svg?branch=master
   :target: https://coveralls.io/github/GeoscienceAustralia/PyRate?branch=master
.. image:: https://pyup.io/repos/github/geoscienceaustralia/pyrate/shield.svg
   :target: https://pyup.io/repos/github/geoscienceaustralia/pyrate/
.. image:: https://pyup.io/repos/github/geoscienceaustralia/pyrate/python-3-shield.svg
   :target: https://pyup.io/repos/github/geoscienceaustralia/pyrate/

PyRate is a Python tool for estimating the average rate (velocity) and
incremental time-series of surface movement for every pixel in a stack
of images generated by interferometric processing of Synthetic Aperture
Radar (InSAR) data. PyRate is a partial Python translation of
`Pirate <http://homepages.see.leeds.ac.uk/~earhw/software/pirate/>`_, a
Matlab tool developed by the University of Leeds and the Guangdong 
University of Technology.

Quickstart
==========

Before you start, make sure your system has the following packages
installed:

.. code-block:: console

    sudo apt-get install gdal-bin libgdal-dev libpng12-dev libblas-dev liblapack-dev libatlas-dev libatlas-base-dev gfortran libproj-dev openmpi-bin libopenmpi-dev netcdf-bin libnetcdf11 libnetcdf-dev

Alternatively, we recommend using a
`virtualenv <https://gist.github.com/basaks/b33ea9106c7d1d72ac3a79fdcea430eb>`_.

One might need to install a slightly older ``python-daemon`` to install
``PyRate``:

.. code-block:: console

    pip install python-daemon==2.1.1

To install, simply run ``setup.py``:

.. code-block:: console

    python setup.py install

or install with ``pip``:

.. code-block:: console

    pip install Py-Rate

The python requirements should automatically be built and installed.

Anaconda setup for ``PyRate``
-----------------------------

For anaconda installation and ``virtualenv`` instructions, `see this
guide <https://github.com/GeoscienceAustralia/PyRate/blob/master/conda.md>`_.

Tests
-----

Tests use `pytest <http://doc.pytest.org/en/latest/>`_ and can be found
in the *tests/* directory. A small suite of test data is included in the
*tests/test_data/* directory

To run the tests, use the following command inside the top level *PyRate/*
directory:

.. code-block:: console

    pip install pytest
    cd PyRate
    export PYRATEPATH=/path/to/PyRate
    pytest tests/

Config file:
------------

Example configuration files for running PyRate with GAMMA or ROI\_PAC format 
interferograms are contained in the *configs/* directory.

PyRate workflow:
----------------

After following the Quickstart guidelines above, an executable program 
``pyrate`` is created.

Use ``help`` for the different command line options:

.. code-block:: console

    >> pyrate --help
    Usage: pyrate [OPTIONS] COMMAND [ARGS]...

    Options:
      -v, --verbosity [DEBUG|INFO|WARNING|ERROR]
                                      Level of logging
      --help                          Show this message and exit.

    Commands:
      linrate
      postprocess
      prepifg

The ``pyrate`` program has three command line options corresponding to 
different parts of the workflow.

1. ``prepifg``
2. ``linrate``
3. ``postprocess``

Below we discuss these options.

Preparing input interferograms: prepifg
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The first step of PyRate is to convert the GAMMA or ROI\_PAC format 
unwrapped interferograms into the geotiff format, followed by applying 
multilooking and cropping operations. These procedures are all 
performed by ``pyrate prepifg`` command:

.. code-block:: console

    >> pyrate prepifg --help
    Usage: pyrate prepifg [OPTIONS] CONFIG_FILE

    Options:
      --help  Show this message and exit.

The ``prepfig`` command is used as follows:

.. code-block:: console

    pyrate prepifg /path/to/config_file

The two major steps during the ``prepifg`` operation are described
below.

Data formatting: convert to geotiff
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The ``prepifg`` command will determine the input format from the value
specified at the *processor:* keyword in the config file (0: ROI\_PAC;
1: GAMMA)

A GAMMA input dataset requires a geocoded DEM header file (\*.dem.par)
and SLC parameter files (\*.slc.par) for all master and slave epochs to
extract metadata required for the formatting. Therefore three header
files are needed to format each geocoded unwrapped GAMMA interferogram.
The path and name of the DEM header file are specified in the config
file under the *demHeaderFile:* keyword. The SLC parameter files should
be in the directory specified in the config file under the *slcFileDir:* 
keyword. SLC parameter files for a particular interferogram are found
automatically by date string pattern matching.

A ROI\_PAC input dataset requires a header/resource file (*.unw.rsc*
extension) for each geocoded unwrapped interferogram (in the
same directory) and the geocoded DEM header file (\*.dem.rsc) specified 
in the config file under the *demHeaderFile:* keyword. The geographic 
projection in the parameter *DATUM:* is extracted from the DEM header file.

Image transformations: multilooking and cropping
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The ``prepifg`` command will also perform multi-looking (image 
sub-sampling) and cropping of the input interferograms.

Two examples of the config files are provided in the *configs/*`` directory,
with examples of the ROI_PAC and GAMMA prepifg configuration.
Both config files can be used with ``prepifg``.

Linear rate and time series analysis: linrate
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    >> pyrate linrate --help
    Usage: pyrate linrate [OPTIONS] CONFIG_FILE

    Options:
      -r, --rows INTEGER  divide ifgs into this many rows
      -c, --cols INTEGER  divide ifgs into this many columns
      --help              Show this message and exit

This is the core of the processing tools, handled by the ``linrate``
command:

.. code-block:: python

    pyrate linrate path/to/config_file -c 3 -r 4

This command will performs the time series and linear rate analysis, but has
the options to break the interferograms into tiles of ``r`` rows and
``c`` columns. The above command will break the interferograms into
12 tiles and will produce 12 linear rate and time series products 
corresponding to each tile.

The optional rows and columns can be used to create smaller ``tiles`` of 
the full size interferograms that can more easily be accommodated in 
memory. The number of tiles chosen should be as small as possible that 
fits in the system memory.

Putting the tiles back together: postprocess
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The last step of the PyRate workflow is to reassemble the tiles and save 
geotiff files of the final time series and linear rate products.

.. code-block:: python

    >> pyrate postprocess --help
    Usage: pyrate postprocess [OPTIONS] CONFIG_FILE

    Options:
      -r, --rows INTEGER  divide ifgs into this many rows
      -c, --cols INTEGER  divide ifgs into this many columns
      --help              Show this message and exit.

Make sure to use the same number of rows and columns that was used in the 
previous ``linrate`` step:

.. code-block:: python

    pyrate postprocess path/to/config_file -c 3 -r 4

MPI Support
-----------

``PyRate`` has been designed for use on High Performance Computers and 
instructions to use a HPC cluster can be found in the `pbs directory <pbs>`_.

Python multi-threading support
------------------------------

In addition to the MPI support for HPC, PyRate can use standard
multi-threading simply by turning ``parallel:  1`` in the config file to
take advantage of multiple cores on a single PC.

Useful Links
============

Home Page https://github.com/GeoscienceAustralia/PyRate

Documentation http://geoscienceaustralia.github.io/PyRate

Issue tracking https://github.com/GeoscienceAustralia/PyRate/issues

Bugs & Feedback
===============

For bugs, questions and discussions, please use `Github
Issues <https://github.com/GeoscienceAustralia/PyRate/issues>`_.
